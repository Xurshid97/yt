

# import os
# import yt_dlp
# import logging
# import asyncio
# from telegram import Update
# from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
# from telethon.sync import TelegramClient
# from dotenv import load_dotenv

# # Set up logging
# logging.basicConfig(level=logging.INFO)

# load_dotenv()

# # Retrieve credentials from environment variables
# TOKEN = os.getenv("TOKEN")
# API_ID = int(os.getenv("API_ID"))  # Ensure it's an integer
# API_HASH = os.getenv("API_HASH")
# PHONE_NUMBER = os.getenv("PHONE_NUMBER")
# PRIVATE_GROUP_ID = int(os.getenv("PRIVATE_GROUP_ID")) 

# # Initialize Telegram Client (Uploader)
# uploader_client = TelegramClient("uploader", API_ID, API_HASH)

# # Dictionary to track video requests
# video_requests = {}

# # Function to download video from YouTube
# def download_youtube_video(url):
#     ydl_opts = {
#         'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4',  # Ensures MP4 format
#         'outtmpl': 'downloads/%(title)s.%(ext)s',  # Save location
#         'merge_output_format': 'mp4',  # Merge into MP4 if necessary
#         'noplaylist': True,  # Download only the single video
#     }

#     with yt_dlp.YoutubeDL(ydl_opts) as ydl:
#         info_dict = ydl.extract_info(url, download=True)
#         video_path = ydl.prepare_filename(info_dict)
#         return video_path

# # Start command
# async def start(update: Update, context: CallbackContext):
#     await update.message.reply_text("Send me a YouTube link, and Iâ€™ll get the video for you.")

# # Handle YouTube links (Requester - User A)
# async def handle_message(update: Update, context: CallbackContext):
#     url = update.message.text
#     requester_id = update.message.from_user.id

#     if "youtube.com" in url or "youtu.be" in url:
#         await update.message.reply_text("Downloading video... Please wait.")

#         video_path = download_youtube_video(url)
#         video_requests[requester_id] = video_path  # Store request with user ID

#         await update.message.reply_text("Uploading to Telegram... Please wait.")

#         async with uploader_client:
#             await uploader_client.connect()

#             try:
#                 group_entity = await uploader_client.get_entity(PRIVATE_GROUP_ID)
                
#                 sent_message = await uploader_client.send_file(group_entity, video_path)

#                 uploaded_message_id = sent_message.id
#                 logging.info(f"Uploaded video ID: {uploaded_message_id}")

#                 if uploaded_message_id:
#                     # Forward only the video to the requester
#                     await context.bot.forward_message(
#                         chat_id=requester_id,
#                         from_chat_id=PRIVATE_GROUP_ID,  
#                         message_id=uploaded_message_id  
#                     )
#                     await update.message.reply_text("Upload completed and sent to the requester.")
#                 else:
#                     logging.error("Uploaded message ID not found.")
#                     await update.message.reply_text("Failed to retrieve uploaded video.")

#             except Exception as e:
#                 logging.error(f"Error: {e}")
#                 await update.message.reply_text(f"Error: {e}")

#     else:
#         await update.message.reply_text("Please send a valid YouTube link.")

# # Main function
# def main():
#     app = Application.builder().token(TOKEN).read_timeout(600).write_timeout(600).build()
#     app.add_handler(CommandHandler("start", start))
#     app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

#     uploader_client.start(PHONE_NUMBER)  # Start uploader session
#     app.run_polling()

# if __name__ == "__main__":
#     main()